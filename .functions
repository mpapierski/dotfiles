#!/bin/bash

# Use Gitâ€™s colored diff when available
if command -v git >/dev/null 2>&1 ; then
    function diff() {
        git diff --no-index --color-words "$@";
    }
fi;

# function Extract for common file formats
# Source: https://github.com/xvoland/Extract
function extract {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
    return 1
 else
    for n in $@
    do
      if [ -f "$n" ] ; then
          case "${n%,}" in
            *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
                         tar xvf "$n"       ;;
            *.lzma)      unlzma ./"$n"      ;;
            *.bz2)       bunzip2 ./"$n"     ;;
            *.rar)       unrar x -ad ./"$n" ;;
            *.gz)        gunzip ./"$n"      ;;
            *.zip)       unzip ./"$n"       ;;
            *.z)         uncompress ./"$n"  ;;
            *.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar)
                         7z x ./"$n"        ;;
            *.xz)        unxz ./"$n"        ;;
            *.exe)       cabextract ./"$n"  ;;
            *)
                         echo "extract: '$n' - unknown archive method"
                         return 1
                         ;;
          esac
      else
          echo "'$n' - file does not exist"
          return 1
      fi
    done
fi
}

# In case a command is not found it will load a handler
# to deal with it.
if [ -e /etc/zsh_command_not_found ]; then
    # Load up command not found handler
    . /etc/zsh_command_not_found
fi

# Syntax-highlight JSON strings or files
function json() {
    if [ "$#" -ne 0 ]; then # argument
        jq -C . - <<< "$@"
    else
        jq -C . -
    fi
}

# Syntax-highlight XML strings or files
function xml() {
    if [ "$#" -ne 0 ]; then # argument
        xmllint --format - <<< "$@" | pygmentize -l xml
    else
        xmllint --format - | pygmentize -l xml
    fi
}

# Graphical alert
function alert() {
    if [ "$#" -ne 2 ]; then
        (>&2 echo "Usage: alert [title] [body]")
    fi
    # TODO: Find a way to do this on macOS as well
    notify-send "$1" "$2"
}

# Wrapper to run long running process and notify later
function wait_for(){
    local start="$(date +%s)"
    "$@"
    local exit_code="$?"
    alert "Notification" "Long running command \"$(echo $@)\" took $(($(date +%s) - start)) seconds to finish with exit code $exit_code"
}
